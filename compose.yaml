services:
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/editingUser?schema=public&connect_timeout=300
      - SALT_ROUND=15
      - JWT_SECRET=sujoykr
      - AMQP_SERVER=amqp://amqpuser:amqppassword@rabbitmq:5672
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network
    command: >
      sh -c "npx prisma migrate deploy && npm run start"
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"

  image-service:
    build: ./image-service
    container_name: image-service
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - HOST_URL=http://localhost/api/access
      - DATABASE_URL=mongodb://mongo:27017/editing-image
      - JWT_SECRET=sujoykr
      - AMQP_SERVER=amqp://amqpuser:amqppassword@rabbitmq:5672
    volumes:
      - img_uploads:/usr/src/app/uploads
    depends_on:
      mongo:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"

  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "6000:6000"
    environment:
      - PORT=6000
      - AMQP_SERVER=amqp://amqpuser:amqppassword@rabbitmq:5672
      - NODEMAILER_EMAIL=sujoykr9@gmail.com
      - NODEMAILER_PASS=hzfw gyxy mlfu laza
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      user-service:
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  access-service:
    build: ./access-service
    container_name: access-service
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - JWT_SECRET=sujoykr
      - AMQP_SERVER=amqp://amqpuser:amqppassword@rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "2000:2000"
    environment:
      - PORT=2000
      - USER_SERVICE_URL=http://user-service:3000/
      - IMAGE_SERVICE_URL=http://image-service:4000/
      - ACCESS_SERVICE_URL=http://access-service:5000/
    depends_on:
      user-service:
        condition: service_started
      image-service:
        condition: service_started
      access-service:
        condition: service_started
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  postgres:
    image: postgres:12
    container_name: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  pg-admin:
    image: dpage/pgadmin4:6
    container_name: pg-admin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@email.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_LISTEN_PORT=5050
    ports:
      - "5050:5050"
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "128M"

  mongo:
    image: mongo:6
    container_name: mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    ports:
      - "8081:8081"
    depends_on:
      mongo:
        condition: service_started
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: amqpuser
      RABBITMQ_DEFAULT_PASS: amqppassword
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 30s
      retries: 3

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "128M"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
    depends_on:
      user-service:
        condition: service_started
      image-service:
        condition: service_started
      access-service:
        condition: service_started
      api-gateway:
        condition: service_started
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  prometheus:
    build: ./prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - prom_data:/prometheus
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

# add http://host.docker.internal:9090 as Prometheus connection string, 11159 as dashboard ID

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "8000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=grafanauser
      - GF_SECURITY_ADMIN_PASSWORD=grafanapass
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped
    networks:
      - app_network
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "256M"

volumes:
  mongo_data:
  redis_data:
  pg_data:
  grafana_data:
  prom_data:
  img_uploads:

networks:
  app_network:
    driver: bridge
